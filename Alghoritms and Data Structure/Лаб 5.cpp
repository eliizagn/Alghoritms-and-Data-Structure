/*
? ???? ?????? ?????????? ?????????????? ??????????? ???????? ???????? ?????????. ??? ????? ?????????, ?????? ????? 
????????? ??????????.

???? ???????? ??? ???? ?? ??????????????? ??????? ? ???????? ???????. ??????? ??????? ??????????? ? ??????? ?????????? 
? ????????? ???????? ??????????.

??????? ?? ???????, ??? ????? ?????? ???????? ???????? ????? ???? ??????? ?????? ?????? ? ??? ?????????????? ??????. 
???? ???? ????? ???????????. ?????? ????? ???? ???????, ??? ? ????? ????? ?????? ??????. ????? ???? ??????? ????????, 
????? ?? ?? ????????? ??? ?????? ?????? ???, ????? ???? ????? 3 ?????, ?????? ?? ??????? ??????????? ????? ??? ????.

???? ??????, ??? ???????? ?????, ?????? ???? ???????, ? ?????? ???????? ?? ??? ??????.

? ?????? ?????? ?????? ????? N -- ?????????? ??????? ? ?????.

? ????????? N ??????? ???????? ?????????? ??????? (x,y).

x -- ??????, ?? ??????? ????????? ??????.
y -- ?????????? ?? ???? ?????, ?? ??????? ????????? ??????. 1?N?50000

???????? ??????

???????? YES, ???? ??????? ????? ?????????, ????? ???????? NO.
*/

#include <iostream>
#include <vector>
using namespace std;

struct Node {
    int nail;
    int condition;
    bool checked;

    Node() : nail(0), condition(0), checked(false) {}
    Node(int _value) : nail(_value), condition(1), checked(false) {}
};

struct Hashtable {
    vector<Node*> nails;
    int size;
    int newSize;

    Hashtable() : newSize(0) {}

    Hashtable(int _size) : size(_size), newSize(0) {
        nails = vector<Node*>(size);
        for (int i = 0; i < nails.size(); i++) {
            nails[i] = new Node();
        }
    };

    int getHash(int key) {
        return key % size;
    }

    void insert(int value) {
        int index = getHash(value);

        if (nails[index]->condition == 0) {
            nails[index]->nail = value;
            nails[index]->condition = 1;
            ++newSize;
        }
        else {
            int i = index;

            while (nails[i]->condition != 0) {
                i++;

                if (i >= size)
                    i %= size;
            }

            if (nails[i]->condition != 1) {
                nails[i]->condition = 1;
                nails[i]->nail = value;
                ++newSize;
            }
        }
    }

    Node* search(int value) {
        int index = getHash(value);

        while (nails[index]->condition != 0) {
            if (!nails[index]->checked && nails[index]->nail == value)
                return nails[index];

            index++;

            if (index >= size)
                index %= size;
        }

        return nullptr;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int N;
    cin >> N;
    int count = 0;

    Hashtable* xHashTable = new Hashtable(N);
    Hashtable* yHashTable = new Hashtable(N);

    int* x = new int[N];
    int* y = new int[N];

    for (int i = 0; i < N; i++) {
        cin >> x[i];
        cin >> y[i];

        if (xHashTable->search(x[i]) || yHashTable->search(y[i]))
            continue;

        xHashTable->insert(x[i]);
        yHashTable->insert(y[i]);
        count++;

        if (count > 3)
            break;
    }

    if (count == 3)
        cout << "YES";
    else
        cout << "NO";

    return 0;
}

/*
????????? -- ??????????????? ????? ?????????.

?? ?????????????? ??????????? ???? ????????????????, ? ??????? ????????? ???? ???????? ?? ????????? ????? 
??????????? ????? ???????????.

?????? ?? ?????????? ???????? ????????? ??? ????????.

??????? ??????

? ?????? ?????? ????????? ????? N?10^6  -- ?????? ???????? ????????.

? ????????? N ??????? ???? ???????? ??????? ????????? ai?10^9
????? ???? N ?????, ??????? ???????? ???????? ??????? ????????? bi?10^9

???????? ??????

???????? YES,???? ????????? ?????, ????? ??????? NO.
*/

#include <iostream>
#include <vector>
using namespace std;

class Hash {
private:
    vector<vector<int>> table;

public:
    Hash(int size) : table(size) {}

    void insert(int value) {
        int index = hash(value);
        table[index].push_back(value);
    }

    bool contains(int value) {
        int index = hash(value);
        for (int i : table[index]) {
            if (i == value) {
                return true;
            }
        }
        return false;
    }

    int hash(int value) {
        return value % table.size();
    }
};

bool Comparing(int n, vector<int>& A, vector<int>& B) {
    if (n != A.size() || n != B.size()) {
        return false;
    }

    Hash hashSet(n);

    for (int i : A) {
        hashSet.insert(i);
    }

    for (int i : B) {
        if (!hashSet.contains(i)) {
            return false;
        }
    }

    return true;
}

int main() {
    int n;
    cin >> n;

    vector<int> A(n);
    vector<int> B(n);

    for (int i = 0; i < n; ++i) {
        cin >> A[i];
    }

    for (int i = 0; i < n; ++i) {
        cin >> B[i];
    }

    if (Comparing(n, A, B)) {
        cout << "YES" << endl;
    }
    else {
        cout << "NO" << endl;
    }

    return 0;
}

/*
? ???????????? MIT(O) ? ????? ??????? ???? ???????? ????? ???? ?? ?????????? ??????????, ?? ??????? ?????? ??????? 
???????? ????????? ?????????? ??????.

????? ????, ?? ??????????? ????? ??????????? ??????? ???????????? ??????.

?? ???????, ???????? ?? ??????? ?????? ????? ?? 5 ?? ???????? "????????? ? ????????? ??????". ??????? ?? ???????????? 
? ??????????????, ??? ?????????? ?????????????????????? ???????, ??????? ???????? ?? ??????? 4 ?????:
1) ????? ??????? ???? ? ??????
2) ??????? ???????? ?? ??????
3) ???????? ???????? ? ??????
4) ????? ???????? ? ????? ??????? ?????? ? ??????

????? ????????, ??? ?????????? ?????? ???????????? ?? ??????? ?????? ?? ????.

??????? ??????

? ?????? ?????? ???????? ??? ????? ????? M Q
M -- ?????????? ?????. M?10^4
Q -- ?????????? ????????? ? ????? ???????. Q?10^7
????? ???? Q ?????, ?????????? ??????? ?????? ?? 4 ?????:
1) a group
2) ? group isu
3) + group isu points
4) m group
group -- ????? ??????
isu -- ????? ??? ????????
points -- ????? ???????? ?? ??????????? ????????????

???????? ??????
??????? K ????? -- ?????? ?? ???????
*/

#include <iostream>
#include <vector>

using namespace std;

struct Student {
    int isuNumber;
    int points;

    Student(int isu, int pts) : isuNumber(isu), points(pts) {}
};

struct Group {
    vector<Student> students;

    void addStudent(int isu, int points) {
        students.emplace_back(isu, points);
    }

    void removeStudent(int isu) {
        for (auto it = students.begin(); it != students.end(); ++it) {
            if ((*it).isuNumber == isu) {
                students.erase(it);
                break;
            }
        }
    }

    double calculateAverage() {
        if (students.empty()) {
            return 0.0;
        }

        double sum = 0.0;
        for (const auto& student : students) {
            sum += student.points;
        }

        return sum / students.size();
    }

    int findHighestScore() {
        if (students.empty()) {
            return 0;
        }

        int maxScore = students[0].points;
        for (const auto& student : students) {
            if (student.points > maxScore) {
                maxScore = student.points;
            }
        }

        return maxScore;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int M, Q;
    cin >> M >> Q;

    vector<Group> groups(M + 1);

    for (int i = 0; i < Q; ++i) {
        char op;
        int group, isu, points;
        cin >> op >> group;

        if (op == '+') {
            cin >> isu >> points;
            groups[group].addStudent(isu, points);
        }
        else if (op == '-') {
            cin >> isu;
            groups[group].removeStudent(isu);
        }
        else if (op == 'a') {
            cout << static_cast<int>(groups[group].calculateAverage()) << "\n";
        }
        else if (op == 'm') {
            cout << groups[group].findHighestScore() << "\n";
        }
    }

    return 0;
}

/*
??????? ??? ???????????? ? ?????? ?? ?????, ??? ????? ??????? ??????, ??????? ????? ????? ??????????.

??????? ?? ??????? ???? ????????? ??????????? ?????, ?????????? ??? ?????? ? ??????????.

???? ? ???? ?????? ????? ?? ????? ???? ???????, ??? ??????? ??????????? ????????? ???????: ???????? ????? ??????? 
????????? ?????????? ??????? ????? ????.

??? ????? ??? ??????????? ?????? ? ???? ??????? S, ?????????? ?? N ????? (?????????? ???????).

????? ??? ??????? ???????? ??????? S[i] ??? ????? ?????? ????? ????? ??? ?????? ??????? ?????? ???????. 
S[j]?S[i]=j?i, ??? i ? j - ???? ???????? ???????.

???????? ?? ????????? ?????????? ??? ???????, ?????????? ??? ???????.

??????? ??????

? ?????? ?????? ???????? ???? ????? ????? N -- ?????????? ???????. ? ????????? ?????? ???????? N ????? ????? -- 
?????? ???????.
N?10^7
S[i]?10^5
sum(S)?10^10


???????? ??????

???????? ?????????? ??? ????????? ??????????????? ???????.*/

#include <iostream>
#include <vector>
using namespace std;

int hashFunction(int key, int value, int size) {
    return abs((value - key) % size);
}

void insert(vector<vector<pair<int, int>>>& hashTable, int key, int value, int size) {
    int index = hashFunction(key, value, size);
    hashTable[index].emplace_back(key, value);
}

int countPairs(const vector<vector<pair<int, int>>>& hashTable, int size) {
    int sumOfPairs = 0;

    for (int i = 0; i < size; i++) {
        if (hashTable[i].size() > 1) {
            for (size_t j = 0; j < hashTable[i].size(); j++) {
                for (size_t k = j + 1; k < hashTable[i].size(); k++) {
                    if (hashTable[i][j].first - hashTable[i][k].first == hashTable[i][j].second - hashTable[i][k].second) {
                        sumOfPairs++;
                    }
                }
            }
        }
    }

    return sumOfPairs;
}

int main() {
    int n;
    cin >> n;

    vector<vector<pair<int, int>>> hashTable(n);
    int value;

    for (int i = 0; i < n; i++) {
        cin >> value;
        insert(hashTable, i, value, n);
    }

    cout << countPairs(hashTable, n);

    return 0;
}